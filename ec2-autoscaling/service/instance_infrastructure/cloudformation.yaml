AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on EC2, hosted in a public subnet, and accessible via a public load balancer.
Mappings:
  InstanceSize:
    x-small:
      type: "t3.nano"
    small:
      type: "t3.micro"
    medium:
      type: "t3.small"

Resources:

  AMIBaseEC2: 
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-02892a4ea9bfa2192
      InstanceType: !FindInMap [InstanceSize, {{service_instance.inputs.instance_size}}, type]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            Encrypted: true
            VolumeSize: 10
      IamInstanceProfile: !Ref AsgAppInstanceProfile
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: '{{environment.outputs.PublicSubnetOne}}'
          GroupSet:
            - !Ref SgEC2Base
      UserData: !Base64 |
        #!/bin/bash

        sudo yum update -y

        sudo yum install -y java-1.8.0-openjdk git

        cd /usr/local/lib/

        sudo wget https://downloads.apache.org/maven/maven-3/3.8.2/binaries/apache-maven-3.8.2-bin.tar.gz

        sudo tar -xzvf apache-maven-3.8.2-bin.tar.gz

        sudo mv apache-maven-3.8.2 /opt/

        cd /opt/

        sudo ln -s /opt/apache-maven-3.8.2 apache-maven

        sudo su - ec2-user -c "/usr/bin/java -jar /home/ec2-user/target/demo-0.0.1-SNAPSHOT.jar &"

      Tags:
          - Key: Name
            Value: AMIBase
    DependsOn:
      - SsmInstanceRole

  SgAlb:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Sample-ASGApp/SgAlb
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: 'from 0.0.0.0/0:ALL PORTS'
          FromPort: 0
          IpProtocol: tcp
          ToPort: 65535
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: 'from 0.0.0.0/0:80'
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: '{{environment.outputs.VpcId}}'

  SgApp:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Sample-ASGApp/SgApp
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: 'from 0.0.0.0/0:ALL PORTS'
          FromPort: 0
          IpProtocol: tcp
          ToPort: 65535
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: ''
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
      VpcId: '{{environment.outputs.VpcId}}'

  SgEC2Base:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Sample-ASGApp/SgApp
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: 'from 0.0.0.0/0:ALL PORTS'
          FromPort: 0
          IpProtocol: tcp
          ToPort: 65535
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: ''
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
        - CidrIp: 0.0.0.0/0
          Description: ''
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId: '{{environment.outputs.VpcId}}'

  DeployAccountRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              AWS: "arn:aws:iam::{{service_instance.inputs.manage_accountid}}:root"
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - '*'
                Effect: Allow
                Resource: '*'
                Sid: VisualEditor0
            Version: 2012-10-17
          PolicyName: DeployAccountPolicy

  SsmInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'tag:GetResources'
                  - 'ssm:DescribeDocument'
                  - 'ec2messages:GetEndpoint'
                  - 'logs:*'
                  - 'ec2messages:GetMessages'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssm:PutConfigurePackageResult'
                  - 'ssm:ListInstanceAssociations'
                  - 'ssm:GetParameter'
                  - 'ssm:UpdateAssociationStatus'
                  - 'ssm:GetManifest'
                  - 'ec2messages:DeleteMessage'
                  - 'ssm:UpdateInstanceInformation'
                  - 'ec2messages:FailMessage'
                  - 'ssmmessages:OpenDataChannel'
                  - 'ssm:GetDocument'
                  - 'xray:*'
                  - 'ssm:PutComplianceItems'
                  - 'ssm:DescribeAssociation'
                  - 'ssm:GetDeployablePatchSnapshotForInstance'
                  - 'ec2messages:AcknowledgeMessage'
                  - 'ssm:DescribePatchBaselines'
                  - 'ssm:GetParameters'
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssm:PutInventory'
                  - 'cloudwatch:*'
                  - 'ec2messages:SendReply'
                  - 'ssm:ListAssociations'
                  - 'ssm:UpdateInstanceAssociationStatus'
                Effect: Allow
                Resource: '*'
                Sid: VisualEditor0
              - Action: 'ssm:DescribeEffectivePatchesForPatchBaseline'
                Effect: Allow
                Resource: 'arn:aws:ssm:*:*:patchbaseline/*'
                Sid: VisualEditor1
              - Action: 'ssm:GetPatchBaseline'
                Effect: Allow
                Resource: 'arn:aws:ssm:*:*:patchbaseline/*'
                Sid: VisualEditor2
            Version: 2012-10-17
          PolicyName: SsmInstancePolicy

  AsgAppInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref SsmInstanceRole


  AsgAppLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        ImageId: ami-02892a4ea9bfa2192
        InstanceType: !FindInMap [InstanceSize, {{service_instance.inputs.instance_size}}, type]
        TagSpecifications:
          - ResourceType: instance
            Tags:
            - Key: Name
              Value: ProtonEC2Demo
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Encrypted: true
              VolumeSize: 10
        IamInstanceProfile:
          Arn: !GetAtt AsgAppInstanceProfile.Arn
        SecurityGroupIds:
          - !GetAtt 
            - SgApp
            - GroupId
        UserData: !Base64 >-
          #!/bin/bash

          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a 
          fetch-config -m ec2 -c 
          file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s

          sudo ls -l /home/ec2-user/target/demo-0.0.1-SNAPSHOT.jar

          if [ $? -eq 0 ]
          
          then

            sudo su - ec2-user -c "/usr/bin/java -jar /home/ec2-user/target/demo-0.0.1-SNAPSHOT.jar &"

          else

            sudo yum -y install nginx

            yes | sudo amazon-linux-extras install nginx1

            sudo sed 's/80/8080/g' /etc/nginx/nginx.conf > /tmp/nginx.conf

            sudo cp -f /tmp/nginx.conf /etc/nginx/nginx.conf

            sudo service nginx start

          fi

    DependsOn:
      - SsmInstanceRole

  AsgAppASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      MaxSize: '10'
      MinSize: '2'
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB
      LaunchTemplate: 
        LaunchTemplateId: !Ref AsgAppLaunchTemplate
        Version: !GetAtt 'AsgAppLaunchTemplate.LatestVersionNumber'
      MetricsCollection:
        - Granularity: 1Minute
      TargetGroupARNs:
        - !Ref TgApp
      VPCZoneIdentifier:
        - '{{environment.outputs.PublicSubnetOne}}'
        - '{{environment.outputs.PublicSubnetTwo}}'
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true


  AsgAppScalingPolicykeepSpareCPU:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AutoScalingGroupName: !Ref AsgAppASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50


  AlbApp:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: 'false'
        - Key: access_logs.s3.enabled
          Value: 'false'
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt 
          - SgAlb
          - GroupId
      Subnets:
        - '{{environment.outputs.PublicSubnetOne}}'
        - '{{environment.outputs.PublicSubnetTwo}}'
      Type: application

  AlbAppListerner:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TgApp
          Type: forward
      LoadBalancerArn: !Ref AlbApp
      Port: 80
      Protocol: HTTP


  TgApp:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /index.html
      Port: 8080
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      TargetType: instance
      UnhealthyThresholdCount: 6
      VpcId: '{{environment.outputs.VpcId}}'

Outputs:
  ServiceEndpoint:
    Description: The URL to access the service
    Value: !Sub "http://${AlbApp.DNSName}"
  AMIBaseEC2:
    Description: EC2 which is based for AMI
    Value: !Ref 'AMIBaseEC2'
  Region:
    Value: !Ref 'AWS::Region'
  LaunchTemplate:
    Value: !Ref 'AsgAppLaunchTemplate'
  AutoScalingName:
    Value: !Ref 'AsgAppASG'
  DeployAccountRoleArn:
    Value: !GetAtt DeployAccountRole.Arn
    
