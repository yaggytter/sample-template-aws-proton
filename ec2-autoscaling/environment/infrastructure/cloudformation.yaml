AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 in a public subnet. Only supports
             public facing load balancer.
Mappings:
  # The VPC and subnet configuration is passed in via the environment spec.
  SubnetConfig:
    VPC:
      CIDR: '{{ environment.inputs.vpc_cidr}}'
    PublicOne:
      CIDR: '{{ environment.inputs.subnet_one_cidr}}'
    PublicTwo:
      CIDR: '{{ environment.inputs.subnet_two_cidr}}'
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true

  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

# CloudTrail setup
  ArchiveLogsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 2555
            Status: Enabled
            Transitions:
              - StorageClass: GLACIER
                TransitionInDays: 90
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  ArchiveLogsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref ArchiveLogsBucket
      PolicyDocument:
        Statement:
          - Action: 's3:*'
            Condition:
              Bool:
                'aws:SecureTransport': false
            Effect: Deny
            Principal:
              AWS: '*'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - ArchiveLogsBucket
                  - Arn
                - /*
            Sid: Enforce HTTPS Connections
          - Action: 's3:Delete*'
            Effect: Deny
            Principal:
              AWS: '*'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - ArchiveLogsBucket
                  - Arn
                - /*
            Sid: Restrict Delete* Actions
        Version: 2012-10-17

  CloudTrailBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      LoggingConfiguration:
        DestinationBucketName: !Ref ArchiveLogsBucket
        LogFilePrefix: cloudtraillogs
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
      
  CloudTrailBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref CloudTrailBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AWSCloudTrailAclCheck
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:GetBucketAcl'
          Resource: !Sub 'arn:aws:s3:::${CloudTrailBucket}'
        - Sid: AWSCloudTrailWrite
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:PutObject'
          Resource: !Sub 'arn:aws:s3:::${CloudTrailBucket}/AWSLogs/${AWS::AccountId}/*'
          Condition:
            StringEquals:
              's3:x-amz-acl': 'bucket-owner-full-control'
        - Sid: AllowSSLRequestsOnly # AWS Foundational Security Best Practices v1.0.0 S3.5
          Effect: Deny
          Principal: '*'
          Action: 's3:*'
          Resource:
          - !GetAtt 'CloudTrailBucket.Arn'
          - !Sub '${CloudTrailBucket.Arn}/*'
          Condition:
            Bool:
              'aws:SecureTransport': false

  CloudTrailLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 90
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  CloudTrailLogsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
        Version: 2012-10-17

  CloudTrailLogsRoleDefaultPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'logs:PutLogEvents'
              - 'logs:CreateLogStream'
            Effect: Allow
            Resource: !GetAtt 
              - CloudTrailLogGroup
              - Arn
        Version: 2012-10-17
      PolicyName: CloudTrailLogsRoleDefaultPolicy
      Roles:
        - !Ref CloudTrailLogsRole

  CloudTrail:
    Type: 'AWS::CloudTrail::Trail'
    Properties:
      IsLogging: true
      S3BucketName: !Ref CloudTrailBucket
      CloudWatchLogsLogGroupArn: !GetAtt 
        - CloudTrailLogGroup
        - Arn
      CloudWatchLogsRoleArn: !GetAtt 
        - CloudTrailLogsRole
        - Arn
      EnableLogFileValidation: true
      EventSelectors: []
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
    DependsOn:
      - CloudTrailLogsRoleDefaultPolicy
      - CloudTrailLogsRole
      - CloudTrailBucketPolicy

  CloudTrailRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: 2012-10-17

  CloudTrailRoleDefaultPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 's3:PutObject*'
              - 's3:Abort*'
            Effect: Allow
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - CloudTrailBucket
                  - Arn
                - /*
          - Action:
              - 's3:GetObject*'
              - 's3:GetBucket*'
              - 's3:List*'
            Effect: Allow
            Resource:
              - !GetAtt 
                - CloudTrailBucket
                - Arn
              - !Join 
                - ''
                - - !GetAtt 
                    - CloudTrailBucket
                    - Arn
                  - /*
        Version: 2012-10-17
      PolicyName: CloudTrailRoleDefaultPolicy
      Roles:
        - !Ref CloudTrailRole

# Enable SecurityHub
  SecurityHub:
    Type: AWS::SecurityHub::Hub

# These output values will be available to service templates to use.
Outputs:
  VpcId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnetOne'
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref 'PublicSubnetTwo'
  ArchiveLogsBucket:
    Description: ArchiveLogsBucket
    Value: !Ref 'ArchiveLogsBucket'
